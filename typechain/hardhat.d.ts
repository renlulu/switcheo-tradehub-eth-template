/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "BalanceReader",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.BalanceReader__factory>;
    getContractFactory(
      name: "IERC1820Registry",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC1820Registry__factory>;
    getContractFactory(
      name: "Ownable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Ownable__factory>;
    getContractFactory(
      name: "ERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20__factory>;
    getContractFactory(
      name: "ERC20Detailed",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Detailed__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "ERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC777__factory>;
    getContractFactory(
      name: "IERC777",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777__factory>;
    getContractFactory(
      name: "IERC777Recipient",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Recipient__factory>;
    getContractFactory(
      name: "IERC777Sender",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC777Sender__factory>;
    getContractFactory(
      name: "CCM",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCM__factory>;
    getContractFactory(
      name: "CCMProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCMProxy__factory>;
    getContractFactory(
      name: "LockProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.LockProxy__factory>;
    getContractFactory(
      name: "Migrations",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Migrations__factory>;
    getContractFactory(
      name: "CCMMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCMMock__factory>;
    getContractFactory(
      name: "ILockProxy",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ILockProxy__factory>;
    getContractFactory(
      name: "CCMProxyMock",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.CCMProxyMock__factory>;
    getContractFactory(
      name: "JRCoin",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.JRCoin__factory>;
    getContractFactory(
      name: "SwitcheoTokenBSC",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwitcheoTokenBSC__factory>;
    getContractFactory(
      name: "SwitcheoToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwitcheoToken__factory>;
    getContractFactory(
      name: "SwitcheoTokenHeco",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.SwitcheoTokenHeco__factory>;
    getContractFactory(
      name: "Wallet",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Wallet__factory>;

    getContractAt(
      name: "BalanceReader",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.BalanceReader>;
    getContractAt(
      name: "IERC1820Registry",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC1820Registry>;
    getContractAt(
      name: "Ownable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Ownable>;
    getContractAt(
      name: "ERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20>;
    getContractAt(
      name: "ERC20Detailed",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Detailed>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "ERC777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC777>;
    getContractAt(
      name: "IERC777",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777>;
    getContractAt(
      name: "IERC777Recipient",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Recipient>;
    getContractAt(
      name: "IERC777Sender",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC777Sender>;
    getContractAt(
      name: "CCM",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CCM>;
    getContractAt(
      name: "CCMProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CCMProxy>;
    getContractAt(
      name: "LockProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.LockProxy>;
    getContractAt(
      name: "Migrations",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Migrations>;
    getContractAt(
      name: "CCMMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CCMMock>;
    getContractAt(
      name: "ILockProxy",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ILockProxy>;
    getContractAt(
      name: "CCMProxyMock",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.CCMProxyMock>;
    getContractAt(
      name: "JRCoin",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.JRCoin>;
    getContractAt(
      name: "SwitcheoTokenBSC",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwitcheoTokenBSC>;
    getContractAt(
      name: "SwitcheoToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwitcheoToken>;
    getContractAt(
      name: "SwitcheoTokenHeco",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.SwitcheoTokenHeco>;
    getContractAt(
      name: "Wallet",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Wallet>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
