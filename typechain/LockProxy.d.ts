/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  ethers,
  EventFilter,
  Signer,
  BigNumber,
  BigNumberish,
  PopulatedTransaction,
  BaseContract,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  CallOverrides,
} from "ethers";
import { BytesLike } from "@ethersproject/bytes";
import { Listener, Provider } from "@ethersproject/providers";
import { FunctionFragment, EventFragment, Result } from "@ethersproject/abi";
import type { TypedEventFilter, TypedEvent, TypedListener } from "./common";

interface LockProxyInterface extends ethers.utils.Interface {
  functions: {
    "ETH_ADDRESS()": FunctionFragment;
    "SALT_PREFIX()": FunctionFragment;
    "addExtension(bytes,bytes,uint64)": FunctionFragment;
    "ccmProxy()": FunctionFragment;
    "counterpartChainId()": FunctionFragment;
    "createWallet(address,bytes)": FunctionFragment;
    "currentNonce()": FunctionFragment;
    "extensionTransfer(address,address,uint256)": FunctionFragment;
    "extensions(address)": FunctionFragment;
    "getWalletAddress(address,bytes,bytes32)": FunctionFragment;
    "lock(address,bytes,bytes,bytes,bytes,uint256[])": FunctionFragment;
    "lockFromWallet(address,address,bytes,bytes,bytes,uint256[],uint8,bytes32[])": FunctionFragment;
    "registerAsset(bytes,bytes,uint64)": FunctionFragment;
    "registry(address)": FunctionFragment;
    "removeExtension(bytes,bytes,uint64)": FunctionFragment;
    "seenMessages(bytes32)": FunctionFragment;
    "swthToken()": FunctionFragment;
    "tokenFallback(address,uint256,bytes)": FunctionFragment;
    "unlock(bytes,bytes,uint64)": FunctionFragment;
    "wallets(address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "ETH_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "SALT_PREFIX",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addExtension",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "ccmProxy", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "counterpartChainId",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "createWallet",
    values: [string, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "currentNonce",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "extensionTransfer",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "extensions", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getWalletAddress",
    values: [string, BytesLike, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "lock",
    values: [string, BytesLike, BytesLike, BytesLike, BytesLike, BigNumberish[]]
  ): string;
  encodeFunctionData(
    functionFragment: "lockFromWallet",
    values: [
      string,
      string,
      BytesLike,
      BytesLike,
      BytesLike,
      BigNumberish[],
      BigNumberish,
      BytesLike[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "registerAsset",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "registry", values: [string]): string;
  encodeFunctionData(
    functionFragment: "removeExtension",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "seenMessages",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "swthToken", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "tokenFallback",
    values: [string, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [BytesLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "wallets", values: [string]): string;

  decodeFunctionResult(
    functionFragment: "ETH_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "SALT_PREFIX",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "ccmProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "counterpartChainId",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "createWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "currentNonce",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extensionTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "extensions", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWalletAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockFromWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "registerAsset",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "registry", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeExtension",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "seenMessages",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "swthToken", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "tokenFallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "wallets", data: BytesLike): Result;

  events: {
    "LockEvent(address,address,uint64,bytes,bytes,bytes)": EventFragment;
    "UnlockEvent(address,address,uint256,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "LockEvent"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "UnlockEvent"): EventFragment;
}

export type LockEventEvent = TypedEvent<
  [string, string, BigNumber, string, string, string] & {
    tokenAddress: string;
    fromAddress: string;
    toChainId: BigNumber;
    toAssetHash: string;
    toAddress: string;
    txArgs: string;
  }
>;

export type UnlockEventEvent = TypedEvent<
  [string, string, BigNumber, string] & {
    tokenAddress: string;
    toAddress: string;
    amount: BigNumber;
    txArgs: string;
  }
>;

export class LockProxy extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  listeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter?: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): Array<TypedListener<EventArgsArray, EventArgsObject>>;
  off<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  on<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  once<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeListener<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>,
    listener: TypedListener<EventArgsArray, EventArgsObject>
  ): this;
  removeAllListeners<EventArgsArray extends Array<any>, EventArgsObject>(
    eventFilter: TypedEventFilter<EventArgsArray, EventArgsObject>
  ): this;

  listeners(eventName?: string): Array<Listener>;
  off(eventName: string, listener: Listener): this;
  on(eventName: string, listener: Listener): this;
  once(eventName: string, listener: Listener): this;
  removeListener(eventName: string, listener: Listener): this;
  removeAllListeners(eventName?: string): this;

  queryFilter<EventArgsArray extends Array<any>, EventArgsObject>(
    event: TypedEventFilter<EventArgsArray, EventArgsObject>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEvent<EventArgsArray & EventArgsObject>>>;

  interface: LockProxyInterface;

  functions: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    SALT_PREFIX(overrides?: CallOverrides): Promise<[string]>;

    addExtension(
      _argsBz: BytesLike,
      arg1: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    ccmProxy(overrides?: CallOverrides): Promise<[string]>;

    counterpartChainId(overrides?: CallOverrides): Promise<[BigNumber]>;

    createWallet(
      _ownerAddress: string,
      _swthAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    currentNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    extensionTransfer(
      _receivingAddress: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    extensions(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getWalletAddress(
      _ownerAddress: string,
      _swthAddress: BytesLike,
      _bytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<[string]>;

    lock(
      _tokenAddress: string,
      _targetProxyHash: BytesLike,
      _toAddress: BytesLike,
      _toAssetHash: BytesLike,
      _feeAddress: BytesLike,
      _values: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    lockFromWallet(
      _walletAddress: string,
      _tokenAddress: string,
      _targetProxyHash: BytesLike,
      _toAssetHash: BytesLike,
      _feeAddress: BytesLike,
      _values: BigNumberish[],
      _v: BigNumberish,
      _rs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registerAsset(
      _argsBz: BytesLike,
      _fromContractAddr: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    registry(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    removeExtension(
      _argsBz: BytesLike,
      arg1: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    seenMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    swthToken(overrides?: CallOverrides): Promise<[string]>;

    tokenFallback(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      _argsBz: BytesLike,
      _fromContractAddr: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    wallets(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

  SALT_PREFIX(overrides?: CallOverrides): Promise<string>;

  addExtension(
    _argsBz: BytesLike,
    arg1: BytesLike,
    _fromChainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  ccmProxy(overrides?: CallOverrides): Promise<string>;

  counterpartChainId(overrides?: CallOverrides): Promise<BigNumber>;

  createWallet(
    _ownerAddress: string,
    _swthAddress: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

  extensionTransfer(
    _receivingAddress: string,
    _tokenAddress: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  extensions(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getWalletAddress(
    _ownerAddress: string,
    _swthAddress: BytesLike,
    _bytecodeHash: BytesLike,
    overrides?: CallOverrides
  ): Promise<string>;

  lock(
    _tokenAddress: string,
    _targetProxyHash: BytesLike,
    _toAddress: BytesLike,
    _toAssetHash: BytesLike,
    _feeAddress: BytesLike,
    _values: BigNumberish[],
    overrides?: PayableOverrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  lockFromWallet(
    _walletAddress: string,
    _tokenAddress: string,
    _targetProxyHash: BytesLike,
    _toAssetHash: BytesLike,
    _feeAddress: BytesLike,
    _values: BigNumberish[],
    _v: BigNumberish,
    _rs: BytesLike[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registerAsset(
    _argsBz: BytesLike,
    _fromContractAddr: BytesLike,
    _fromChainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  registry(arg0: string, overrides?: CallOverrides): Promise<string>;

  removeExtension(
    _argsBz: BytesLike,
    arg1: BytesLike,
    _fromChainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  seenMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  swthToken(overrides?: CallOverrides): Promise<string>;

  tokenFallback(
    arg0: string,
    arg1: BigNumberish,
    arg2: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    _argsBz: BytesLike,
    _fromContractAddr: BytesLike,
    _fromChainId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  wallets(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<string>;

    SALT_PREFIX(overrides?: CallOverrides): Promise<string>;

    addExtension(
      _argsBz: BytesLike,
      arg1: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    ccmProxy(overrides?: CallOverrides): Promise<string>;

    counterpartChainId(overrides?: CallOverrides): Promise<BigNumber>;

    createWallet(
      _ownerAddress: string,
      _swthAddress: BytesLike,
      overrides?: CallOverrides
    ): Promise<boolean>;

    currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

    extensionTransfer(
      _receivingAddress: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    extensions(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getWalletAddress(
      _ownerAddress: string,
      _swthAddress: BytesLike,
      _bytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<string>;

    lock(
      _tokenAddress: string,
      _targetProxyHash: BytesLike,
      _toAddress: BytesLike,
      _toAssetHash: BytesLike,
      _feeAddress: BytesLike,
      _values: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    lockFromWallet(
      _walletAddress: string,
      _tokenAddress: string,
      _targetProxyHash: BytesLike,
      _toAssetHash: BytesLike,
      _feeAddress: BytesLike,
      _values: BigNumberish[],
      _v: BigNumberish,
      _rs: BytesLike[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    registerAsset(
      _argsBz: BytesLike,
      _fromContractAddr: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    registry(arg0: string, overrides?: CallOverrides): Promise<string>;

    removeExtension(
      _argsBz: BytesLike,
      arg1: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    seenMessages(arg0: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    swthToken(overrides?: CallOverrides): Promise<string>;

    tokenFallback(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;

    unlock(
      _argsBz: BytesLike,
      _fromContractAddr: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    wallets(arg0: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    "LockEvent(address,address,uint64,bytes,bytes,bytes)"(
      tokenAddress?: string | null,
      fromAddress?: string | null,
      toChainId?: BigNumberish | null,
      toAssetHash?: null,
      toAddress?: null,
      txArgs?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, string],
      {
        tokenAddress: string;
        fromAddress: string;
        toChainId: BigNumber;
        toAssetHash: string;
        toAddress: string;
        txArgs: string;
      }
    >;

    LockEvent(
      tokenAddress?: string | null,
      fromAddress?: string | null,
      toChainId?: BigNumberish | null,
      toAssetHash?: null,
      toAddress?: null,
      txArgs?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string, string, string],
      {
        tokenAddress: string;
        fromAddress: string;
        toChainId: BigNumber;
        toAssetHash: string;
        toAddress: string;
        txArgs: string;
      }
    >;

    "UnlockEvent(address,address,uint256,bytes)"(
      tokenAddress?: string | null,
      toAddress?: string | null,
      amount?: null,
      txArgs?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        tokenAddress: string;
        toAddress: string;
        amount: BigNumber;
        txArgs: string;
      }
    >;

    UnlockEvent(
      tokenAddress?: string | null,
      toAddress?: string | null,
      amount?: null,
      txArgs?: null
    ): TypedEventFilter<
      [string, string, BigNumber, string],
      {
        tokenAddress: string;
        toAddress: string;
        amount: BigNumber;
        txArgs: string;
      }
    >;
  };

  estimateGas: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    SALT_PREFIX(overrides?: CallOverrides): Promise<BigNumber>;

    addExtension(
      _argsBz: BytesLike,
      arg1: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    ccmProxy(overrides?: CallOverrides): Promise<BigNumber>;

    counterpartChainId(overrides?: CallOverrides): Promise<BigNumber>;

    createWallet(
      _ownerAddress: string,
      _swthAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    currentNonce(overrides?: CallOverrides): Promise<BigNumber>;

    extensionTransfer(
      _receivingAddress: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    extensions(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getWalletAddress(
      _ownerAddress: string,
      _swthAddress: BytesLike,
      _bytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    lock(
      _tokenAddress: string,
      _targetProxyHash: BytesLike,
      _toAddress: BytesLike,
      _toAssetHash: BytesLike,
      _feeAddress: BytesLike,
      _values: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    lockFromWallet(
      _walletAddress: string,
      _tokenAddress: string,
      _targetProxyHash: BytesLike,
      _toAssetHash: BytesLike,
      _feeAddress: BytesLike,
      _values: BigNumberish[],
      _v: BigNumberish,
      _rs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registerAsset(
      _argsBz: BytesLike,
      _fromContractAddr: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    registry(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    removeExtension(
      _argsBz: BytesLike,
      arg1: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    seenMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    swthToken(overrides?: CallOverrides): Promise<BigNumber>;

    tokenFallback(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      _argsBz: BytesLike,
      _fromContractAddr: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    wallets(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    ETH_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    SALT_PREFIX(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addExtension(
      _argsBz: BytesLike,
      arg1: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    ccmProxy(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    counterpartChainId(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    createWallet(
      _ownerAddress: string,
      _swthAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    currentNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    extensionTransfer(
      _receivingAddress: string,
      _tokenAddress: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    extensions(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getWalletAddress(
      _ownerAddress: string,
      _swthAddress: BytesLike,
      _bytecodeHash: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    lock(
      _tokenAddress: string,
      _targetProxyHash: BytesLike,
      _toAddress: BytesLike,
      _toAssetHash: BytesLike,
      _feeAddress: BytesLike,
      _values: BigNumberish[],
      overrides?: PayableOverrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    lockFromWallet(
      _walletAddress: string,
      _tokenAddress: string,
      _targetProxyHash: BytesLike,
      _toAssetHash: BytesLike,
      _feeAddress: BytesLike,
      _values: BigNumberish[],
      _v: BigNumberish,
      _rs: BytesLike[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registerAsset(
      _argsBz: BytesLike,
      _fromContractAddr: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    registry(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    removeExtension(
      _argsBz: BytesLike,
      arg1: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    seenMessages(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    swthToken(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    tokenFallback(
      arg0: string,
      arg1: BigNumberish,
      arg2: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      _argsBz: BytesLike,
      _fromContractAddr: BytesLike,
      _fromChainId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    wallets(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
